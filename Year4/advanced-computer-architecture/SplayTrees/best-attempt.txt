sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 4
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 43.612
Branch Predictor Power Consumption: 2.11632  (5.09%)
 branch target buffer power (W): 1.8151
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0383952
 RAS power (W): 0.075245
Rename Logic Power Consumption: 0.417965  (1%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 2.20432  (5.3%)
 tagdrive (W): 0.0943488
 tagmatch (W): 0.033695
 Selection Logic (W): 0.0134217
 decode_power (W): 0.0532503
 wordline_power (W): 0.0844643
 bitline_power (W): 1.92514
Load/Store Queue Power Consumption: 1.33624  (3.21%)
 tagdrive (W): 0.677012
 tagmatch (W): 0.201547
 decode_power (W): 0.0177501
 wordline_power (W): 0.0150119
 bitline_power (W): 0.424923
Arch. Register File Power Consumption: 3.57247  (8.59%)
 decode_power (W): 0.113514
 wordline_power (W): 0.0844643
 bitline_power (W): 3.37449
Result Bus Power Consumption: 1.82673  (4.39%)
Total Clock Power: 17.9082  (43%)
Int ALU Power: 3.4951  (8.4%)
FP ALU Power: 3.57026  (8.58%)
Instruction Cache Power Consumption: 2.55583  (6.14%)
 decode_power (W): 0.724888
 wordline_power (W): 0.057312
 bitline_power (W): 1.14691
 senseamp_power (W): 0.192
 tagarray_power (W): 0.434717
Itlb_power (W): 0.27086 (0.651%)
Data Cache Power Consumption: 1.39228  (3.35%)
 decode_power (W): 0.651055
 wordline_power (W): 0.0378034
 bitline_power (W): 0.339044
 senseamp_power (W): 0.096
 tagarray_power (W): 0.268375
Dtlb_power (W): 0.544755 (1.31%)
Level 2 Cache Power Consumption: 0.40072 (0.963%)
 decode_power (W): 0.0406909
 wordline_power (W): 0.012296
 bitline_power (W): 0.169522
 senseamp_power (W): 0.048
 tagarray_power (W): 0.130211
sim: command line: /homes/phjk/simplesim-wattch/sim-outorder -ruu:size 16 -lsq:size 16 -res:fpalu 1 -res:fpmult 1 -decode:width 4 -issue:width 4 -res:ialu 3 -cache:dl1 dl1:128:16:1:l -cache:dl2 ul2:128:64:1:l -bpred comb -bpred:comb 512 -bpred:ras 4 -bpred:btb 256 2 -tlb:itlb itlb:16:4096:1:l -tlb:dtlb dtlb:16:4096:1:l -cache:il2 dl2 ./splaytest.ss 3 100000 100000 100000 3 

sim: simulation started @ Tue Nov  7 11:25:43 2023, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   comb # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      512 # combining predictor config (<meta_table_size>)
-bpred:ras                  4 # return address stack size (0 for no return stack)
-bpred:btb       256 2 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                  16 # load/store queue (LSQ) size
-cache:dl1       dl1:128:16:1:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:128:64:1:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:1:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:16:4096:1:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   3 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  1 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **
Performing 100000 insertions with keys generated by random walk
Insertions: 18359260 microseconds
Performing 100000 queries
Queries: 13851731 microseconds, 138.517310 microseconds/query
number_of_matches = 100000

sim: ** simulation statistics **
sim_num_insn               37730720 # total number of instructions committed
sim_num_refs               15997977 # total number of loads and stores committed
sim_num_loads               9816937 # total number of loads committed
sim_num_stores         6181040.0000 # total number of stores committed
sim_num_branches            8589826 # total number of branches committed
sim_elapsed_time                 32 # total simulation time in seconds
sim_inst_rate          1179085.0000 # simulation speed (in insts/sec)
sim_total_insn             40411210 # total number of instructions executed
sim_total_refs             16972018 # total number of loads and stores executed
sim_total_loads            10440609 # total number of loads executed
sim_total_stores       6531409.0000 # total number of stores executed
sim_total_branches          9160188 # total number of branches executed
sim_cycle                  26192630 # total simulation time in cycles
sim_IPC                      1.4405 # instructions per cycle
sim_CPI                      0.6942 # cycles per instruction
sim_exec_BW                  1.5428 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.3925 # instruction per branch
IFQ_count                  90412310 # cumulative IFQ occupancy
IFQ_fcount                 20052837 # cumulative IFQ full count
ifq_occupancy                3.4518 # avg IFQ occupancy (insn's)
ifq_rate                     1.5428 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.2373 # avg IFQ occupant latency (cycle's)
ifq_full                     0.7656 # fraction of time (cycle's) IFQ was full
RUU_count                 378952730 # cumulative RUU occupancy
RUU_fcount                 19277379 # cumulative RUU full count
ruu_occupancy               14.4679 # avg RUU occupancy (insn's)
ruu_rate                     1.5428 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  9.3774 # avg RUU occupant latency (cycle's)
ruu_full                     0.7360 # fraction of time (cycle's) RUU was full
LSQ_count                 119732029 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                4.5712 # avg LSQ occupancy (insn's)
lsq_rate                     1.5428 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.9628 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                  538643175 # total number of slip cycles
avg_sim_slip                14.2760 # the average slip between issue and retirement
bpred_comb.lookups          9415756 # total number of bpred lookups
bpred_comb.updates          8589826 # total number of updates
bpred_comb.addr_hits        8249526 # total number of address-predicted hits
bpred_comb.dir_hits         8251548 # total number of direction-predicted hits (includes addr-hits)
bpred_comb.used_bimod       4003609 # total number of bimodal predictions used
bpred_comb.used_2lev        1571401 # total number of 2-level predictions used
bpred_comb.misses            338278 # total number of misses
bpred_comb.jr_hits           966903 # total number of address-predicted hits for JR's
bpred_comb.jr_seen           968573 # total number of JR's seen
bpred_comb.jr_non_ras_hits.PP            1 # total number of address-predicted hits for non-RAS JR's
bpred_comb.jr_non_ras_seen.PP            9 # total number of non-RAS JR's seen
bpred_comb.bpred_addr_rate    0.9604 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_comb.bpred_dir_rate    0.9606 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_comb.bpred_jr_rate    0.9983 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_comb.bpred_jr_non_ras_rate.PP    0.1111 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_comb.retstack_pushes      1120029 # total number of address pushed onto ret-addr stack
bpred_comb.retstack_pops      1012742 # total number of address popped off of ret-addr stack
bpred_comb.used_ras.PP       968564 # total number of RAS predictions used
bpred_comb.ras_hits.PP       966902 # total number of RAS hits
bpred_comb.ras_rate.PP    0.9983 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               41739539 # total number of accesses
il1.hits                   41735589 # total number of hits
il1.misses                     3950 # total number of misses
il1.replacements               3459 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0001 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               15961812 # total number of accesses
dl1.hits                   15847357 # total number of hits
dl1.misses                   114455 # total number of misses
dl1.replacements             114327 # total number of replacements
dl1.writebacks                78487 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0072 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0072 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0049 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 196892 # total number of accesses
ul2.hits                     169148 # total number of hits
ul2.misses                    27744 # total number of misses
ul2.replacements              27616 # total number of replacements
ul2.writebacks                15411 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.1409 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.1403 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0783 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              41739539 # total number of accesses
itlb.hits                  41739495 # total number of hits
itlb.misses                      44 # total number of misses
itlb.replacements                28 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              16237553 # total number of accesses
dtlb.hits                  16236353 # total number of hits
dtlb.misses                    1200 # total number of misses
dtlb.replacements              1190 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0001 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           10947615.3454 # total power usage of rename unit
bpred_power            55431876.8284 # total power usage of bpred unit
window_power           57736922.9151 # total power usage of instruction window
lsq_power              34999755.9329 # total power usage of load/store queue
regfile_power          93572440.0607 # total power usage of arch. regfile
icache_power           74038466.8885 # total power usage of icache
dcache_power           50735976.7129 # total power usage of dcache
dcache2_power          10495899.3829 # total power usage of dcache2
alu_power              185060336.2807 # total power usage of alu
falu_power             93514531.6279 # total power usage of falu
resultbus_power        47846991.8109 # total power usage of resultbus
clock_power            469062054.4198 # total power usage of clock
avg_rename_power             0.4180 # avg power usage of rename unit
avg_bpred_power              2.1163 # avg power usage of bpred unit
avg_window_power             2.2043 # avg power usage of instruction window
avg_lsq_power                1.3362 # avg power usage of lsq
avg_regfile_power            3.5725 # avg power usage of arch. regfile
avg_icache_power             2.8267 # avg power usage of icache
avg_dcache_power             1.9370 # avg power usage of dcache
avg_dcache2_power            0.4007 # avg power usage of dcache2
avg_alu_power                7.0654 # avg power usage of alu
avg_falu_power               3.5703 # avg power usage of falu
avg_resultbus_power          1.8267 # avg power usage of resultbus
avg_clock_power             17.9082 # avg power usage of clock
fetch_stage_power      129470343.7169 # total power usage of fetch stage
dispatch_stage_power   10947615.3454 # total power usage of dispatch stage
issue_stage_power      386875883.0354 # total power usage of issue stage
avg_fetch_power              4.9430 # average power of fetch unit per cycle
avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
avg_issue_power             14.7704 # average power of issue unit per cycle
total_power            1089928336.5781 # total power per cycle
avg_total_power_cycle       41.6120 # average total power per cycle
avg_total_power_cycle_nofp_nod2      37.6410 # average total power per cycle
avg_total_power_insn        26.9709 # average total power per insn
avg_total_power_insn_nofp_nod2      24.3971 # average total power per insn
rename_power_cc1       6518982.2003 # total power usage of rename unit_cc1
bpred_power_cc1        12888129.3960 # total power usage of bpred unit_cc1
window_power_cc1       40031126.0364 # total power usage of instruction window_cc1
lsq_power_cc1          8031276.0753 # total power usage of lsq_cc1
regfile_power_cc1      51656230.6453 # total power usage of arch. regfile_cc1
icache_power_cc1       46693905.0489 # total power usage of icache_cc1
dcache_power_cc1       20112812.2940 # total power usage of dcache_cc1
dcache2_power_cc1        47098.7748 # total power usage of dcache2_cc1
alu_power_cc1          59756457.0752 # total power usage of alu_cc1
resultbus_power_cc1    31507704.5278 # total power usage of resultbus_cc1
clock_power_cc1        218246180.3949 # total power usage of clock_cc1
avg_rename_power_cc1         0.2489 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.4921 # avg power usage of bpred unit_cc1
avg_window_power_cc1         1.5283 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.3066 # avg power usage of lsq_cc1
avg_regfile_power_cc1        1.9722 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.7827 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.7679 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0018 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.2814 # avg power usage of alu_cc1
avg_resultbus_power_cc1       1.2029 # avg power usage of resultbus_cc1
avg_clock_power_cc1          8.3324 # avg power usage of clock_cc1
fetch_stage_power_cc1  59582034.4449 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 6518982.2003 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  159486474.7836 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.2748 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.2489 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          6.0890 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  495489902.4690 # total power per cycle_cc1
avg_total_power_cycle_cc1      18.9171 # average total power per cycle_cc1
avg_total_power_insn_cc1      12.2612 # average total power per insn_cc1
rename_power_cc2       4222515.2425 # total power usage of rename unit_cc2
bpred_power_cc2        9089392.2605 # total power usage of bpred unit_cc2
window_power_cc2       32277284.0802 # total power usage of instruction window_cc2
lsq_power_cc2          5555507.6125 # total power usage of lsq_cc2
regfile_power_cc2      14189261.9465 # total power usage of arch. regfile_cc2
icache_power_cc2       46693905.0489 # total power usage of icache_cc2
dcache_power_cc2       15459274.6550 # total power usage of dcache_cc2
dcache2_power_cc2        39449.2386 # total power usage of dcache2_cc2
alu_power_cc2          42860410.8344 # total power usage of alu_cc2
resultbus_power_cc2    17951286.4227 # total power usage of resultbus_cc2
clock_power_cc2        147422971.7418 # total power usage of clock_cc2
avg_rename_power_cc2         0.1612 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.3470 # avg power usage of bpred unit_cc2
avg_window_power_cc2         1.2323 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.2121 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.5417 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.7827 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.5902 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0015 # avg power usage of dcache2_cc2
avg_alu_power_cc2            1.6364 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.6854 # avg power usage of resultbus_cc2
avg_clock_power_cc2          5.6284 # avg power usage of clock_cc2
fetch_stage_power_cc2  55783297.3094 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 4222515.2425 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  114143212.8434 # total power usage of issue stage_cc2
avg_fetch_power_cc2          2.1297 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.1612 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          4.3578 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  335761259.0837 # total power per cycle_cc2
avg_total_power_cycle_cc2      12.8189 # average total power per cycle_cc2
avg_total_power_insn_cc2       8.3086 # average total power per insn_cc2
rename_power_cc3       4665378.5572 # total power usage of rename unit_cc3
bpred_power_cc3        13378383.2678 # total power usage of bpred unit_cc3
window_power_cc3       33928391.1110 # total power usage of instruction window_cc3
lsq_power_cc3          8210576.1230 # total power usage of lsq_cc3
regfile_power_cc3      17913578.4083 # total power usage of arch. regfile_cc3
icache_power_cc3       49428361.2309 # total power usage of icache_cc3
dcache_power_cc3       18636024.4918 # total power usage of dcache_cc3
dcache2_power_cc3      1084397.6422 # total power usage of dcache2_cc3
alu_power_cc3          55390798.7157 # total power usage of alu_cc3
resultbus_power_cc3    19524138.0666 # total power usage of resultbus_cc3
clock_power_cc3        172057629.6074 # total power usage of clock_cc3
avg_rename_power_cc3         0.1781 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.5108 # avg power usage of bpred unit_cc3
avg_window_power_cc3         1.2953 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.3135 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.6839 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.8871 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.7115 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.0414 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.1147 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.7454 # avg power usage of resultbus_cc3
avg_clock_power_cc3          6.5689 # avg power usage of clock_cc3
fetch_stage_power_cc3  62806744.4987 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 4665378.5572 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  136774326.1503 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.3979 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.1781 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          5.2219 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  394217657.2219 # total power per cycle_cc3
avg_total_power_cycle_cc3      15.0507 # average total power per cycle_cc3
avg_total_power_insn_cc3       9.7552 # average total power per insn_cc3
total_rename_access        40410181 # total number accesses of rename unit
total_bpred_access          8589826 # total number accesses of bpred unit
total_window_access       148322611 # total number accesses of instruction window
total_lsq_access           16552342 # total number accesses of load/store queue
total_regfile_access       52546844 # total number accesses of arch. regfile
total_icache_access        41740693 # total number accesses of icache
total_dcache_access        15961812 # total number accesses of dcache
total_dcache2_access         196892 # total number accesses of dcache2
total_alu_access           36789012 # total number accesses of alu
total_resultbus_access     40081671 # total number accesses of resultbus
avg_rename_access            1.5428 # avg number accesses of rename unit
avg_bpred_access             0.3279 # avg number accesses of bpred unit
avg_window_access            5.6628 # avg number accesses of instruction window
avg_lsq_access               0.6319 # avg number accesses of lsq
avg_regfile_access           2.0062 # avg number accesses of arch. regfile
avg_icache_access            1.5936 # avg number accesses of icache
avg_dcache_access            0.6094 # avg number accesses of dcache
avg_dcache2_access           0.0075 # avg number accesses of dcache2
avg_alu_access               1.4046 # avg number accesses of alu
avg_resultbus_access         1.5303 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  4 # max number accesses of bpred unit
max_window_access                16 # max number accesses of instruction window
max_lsq_access                    5 # max number accesses of load/store queue
max_regfile_access               12 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                4 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access             11 # max number accesses of resultbus
max_cycle_power_cc1         29.9864 # maximum cycle power usage of cc1
max_cycle_power_cc2         23.2013 # maximum cycle power usage of cc2
max_cycle_power_cc3         24.5148 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  82768 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                   9092 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   38 # total number of pages allocated
mem.page_mem                   152k # total size of memory pages allocated
mem.ptab_misses                  38 # total first level page table misses
mem.ptab_accesses         296700962 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate


Cache Parameters:
  Size in bytes: 4096
  Number of sets: 256
  Associativity: 2
  Block Size (bytes): 8

Access Time: 7.83328e-09
Cycle Time:  9.2734e-09

Best Ndwl (L1): 8
Best Ndbl (L1): 1
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 6.3486
 tag side (ns): 7.23475
 decode_data (ns): 3.86948
 wordline_data (ns): 0.846292
 bitline_data (ns): 0.454304
 sense_amp_data (ns): 0.58
 decode_tag (ns): 1.23548
 wordline_tag (ns): 1.31674
 bitline_tag (ns): -0.0364655
 sense_amp_tag (ns): 0.26
 compare (ns): 2.49475
 mux driver (ns): 1.6004
 sel inverter (ns): 0.363852
 data output driver (ns): 0.598526
 total data path (with output driver) (ns): 5.75007
 total tag path is set assoc (ns): 7.23475
 precharge time (ns): 1.44012

Cache Parameters:
  Size in bytes: 16384
  Number of sets: 512
  Associativity: 1
  Block Size (bytes): 32

Access Time: 6.15176e-09
Cycle Time:  8.05494e-09

Best Ndwl (L1): 2
Best Ndbl (L1): 4
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 6.14931
 tag side (ns): 6.15176
 decode_data (ns): 3.35254
 wordline_data (ns): 1.30935
 bitline_data (ns): 0.184839
 sense_amp_data (ns): 0.58
 decode_tag (ns): 1.84499
 wordline_tag (ns): 0.847457
 bitline_tag (ns): 0.250732
 sense_amp_tag (ns): 0.26
 compare (ns): 2.36506
 valid signal driver (ns): 0.583518
 data output driver (ns): 0.722579
 total data path (with output driver) (ns): 5.42673
 total tag path is dm (ns): 6.15176
 precharge time (ns): 1.90318

Cache Parameters:
  Size in bytes: 2048
  Number of sets: 128
  Associativity: 1
  Block Size (bytes): 16

Access Time: 5.03452e-09
Cycle Time:  6.51749e-09

Best Ndwl (L1): 4
Best Ndbl (L1): 2
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 1
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 4.76268
 tag side (ns): 5.03452
 decode_data (ns): 2.58381
 wordline_data (ns): 0.889144
 bitline_data (ns): 0.0782872
 sense_amp_data (ns): 0.58
 decode_tag (ns): 0.937867
 wordline_tag (ns): 0.801456
 bitline_tag (ns): 0.100547
 sense_amp_tag (ns): 0.26
 compare (ns): 2.35287
 valid signal driver (ns): 0.581786
 data output driver (ns): 0.631442
 total data path (with output driver) (ns): 4.13124
 total tag path is dm (ns): 5.03452
 precharge time (ns): 1.48297

Cache Parameters:
  Size in bytes: 8192
  Number of sets: 128
  Associativity: 1
  Block Size (bytes): 64

Access Time: 5.0657e-09
Cycle Time:  7.07553e-09

Best Ndwl (L1): 2
Best Ndbl (L1): 2
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 1
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 4.56779
 tag side (ns): 5.0657
 decode_data (ns): 1.80364
 wordline_data (ns): 1.41601
 bitline_data (ns): -0.041816
 sense_amp_data (ns): 0.58
 decode_tag (ns): 1.04972
 wordline_tag (ns): 0.782426
 bitline_tag (ns): 0.105301
 sense_amp_tag (ns): 0.26
 compare (ns): 2.29478
 valid signal driver (ns): 0.573466
 data output driver (ns): 0.809959
 total data path (with output driver) (ns): 3.75784
 total tag path is dm (ns): 5.0657
 precharge time (ns): 2.00984
