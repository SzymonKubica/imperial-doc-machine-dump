sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 8
Window Size: 32
Number of Virtual Registers: 32
Number of Physical Registers: 32
Datapath Width: 64
Total Power Consumption: 85.4693
Branch Predictor Power Consumption: 2.11589  (2.53%)
 branch target buffer power (W): 1.8151
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0162772
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 1.12203  (1.34%)
 Instruction Decode Power (W): 0.0319831
 RAT decode_power (W): 0.227029
 RAT wordline_power (W): 0.0802046
 RAT bitline_power (W): 0.731915
 DCL Comparators (W): 0.0509018
Instruction Window Power Consumption: 10.115  (12.1%)
 tagdrive (W): 0.483157
 tagmatch (W): 0.177897
 Selection Logic (W): 0.0590554
 decode_power (W): 0.227029
 wordline_power (W): 0.288569
 bitline_power (W): 8.87931
Load/Store Queue Power Consumption: 2.30116  (2.76%)
 tagdrive (W): 1.11657
 tagmatch (W): 0.403196
 decode_power (W): 0.0378381
 wordline_power (W): 0.0150119
 bitline_power (W): 0.728542
Arch. Register File Power Consumption: 9.39491  (11.3%)
 decode_power (W): 0.227029
 wordline_power (W): 0.288569
 bitline_power (W): 8.87931
Result Bus Power Consumption: 10.7012  (12.8%)
Total Clock Power: 29.199  (35%)
Int ALU Power: 9.32026  (11.2%)
FP ALU Power: 3.57026  (4.28%)
Instruction Cache Power Consumption: 2.55583  (3.06%)
 decode_power (W): 0.724888
 wordline_power (W): 0.057312
 bitline_power (W): 1.14691
 senseamp_power (W): 0.192
 tagarray_power (W): 0.434717
Itlb_power (W): 0.270961 (0.325%)
Data Cache Power Consumption: 1.85812  (2.23%)
 decode_power (W): 0.651055
 wordline_power (W): 0.0725821
 bitline_power (W): 0.678088
 senseamp_power (W): 0.192
 tagarray_power (W): 0.264398
Dtlb_power (W): 0.543946 (0.652%)
Level 2 Cache Power Consumption: 0.40072 (0.48%)
 decode_power (W): 0.0406909
 wordline_power (W): 0.012296
 bitline_power (W): 0.169522
 senseamp_power (W): 0.048
 tagarray_power (W): 0.130211
sim: command line: /homes/phjk/simplesim-wattch/sim-outorder -ruu:size 32 -lsq:size 32 -res:fpalu 1 -res:fpmult 1 -decode:width 8 -issue:width 8 -res:ialu 8 -cache:dl1 dl1:128:32:1:l -cache:dl2 ul2:128:64:1:l -bpred comb -bpred:comb 128 -bpred:ras 8 -bpred:btb 256 2 -tlb:itlb itlb:16:4096:1:l -tlb:dtlb dtlb:16:4096:1:l -cache:il2 dl2 ./splaytest.ss 3 100000 100000 100000 3 

sim: simulation started @ Wed Nov  8 08:58:58 2023, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   comb # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      128 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       256 2 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               8 # instruction decode B/W (insts/cycle)
-issue:width                8 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  32 # register update unit (RUU) size
-lsq:size                  32 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:1:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:128:64:1:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:1:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:16:4096:1:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   8 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  1 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **
Performing 100000 insertions with keys generated by random walk
Insertions: 15102227 microseconds
Performing 100000 queries
Queries: 11625231 microseconds, 116.252310 microseconds/query
number_of_matches = 100000

sim: ** simulation statistics **
sim_num_insn               37730857 # total number of instructions committed
sim_num_refs               15998005 # total number of loads and stores committed
sim_num_loads               9816957 # total number of loads committed
sim_num_stores         6181048.0000 # total number of stores committed
sim_num_branches            8589852 # total number of branches committed
sim_elapsed_time                 26 # total simulation time in seconds
sim_inst_rate          1451186.8077 # simulation speed (in insts/sec)
sim_total_insn             41015578 # total number of instructions executed
sim_total_refs             17511500 # total number of loads and stores executed
sim_total_loads            10808323 # total number of loads executed
sim_total_stores       6703177.0000 # total number of stores executed
sim_total_branches          9516053 # total number of branches executed
sim_cycle                  22688247 # total simulation time in cycles
sim_IPC                      1.6630 # instructions per cycle
sim_CPI                      0.6013 # cycles per instruction
sim_exec_BW                  1.8078 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.3925 # instruction per branch
IFQ_count                  73069715 # cumulative IFQ occupancy
IFQ_fcount                 15513083 # cumulative IFQ full count
ifq_occupancy                3.2206 # avg IFQ occupancy (insn's)
ifq_rate                     1.8078 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.7815 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6837 # fraction of time (cycle's) IFQ was full
RUU_count                 556745664 # cumulative RUU occupancy
RUU_fcount                  9660616 # cumulative RUU full count
ruu_occupancy               24.5389 # avg RUU occupancy (insn's)
ruu_rate                     1.8078 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 13.5740 # avg RUU occupant latency (cycle's)
ruu_full                     0.4258 # fraction of time (cycle's) RUU was full
LSQ_count                 219099437 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                9.6570 # avg LSQ occupancy (insn's)
lsq_rate                     1.8078 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  5.3419 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                  813695020 # total number of slip cycles
avg_sim_slip                21.5658 # the average slip between issue and retirement
bpred_comb.lookups          9720443 # total number of bpred lookups
bpred_comb.updates          8589852 # total number of updates
bpred_comb.addr_hits        8260057 # total number of address-predicted hits
bpred_comb.dir_hits         8263849 # total number of direction-predicted hits (includes addr-hits)
bpred_comb.used_bimod       4239856 # total number of bimodal predictions used
bpred_comb.used_2lev        1335174 # total number of 2-level predictions used
bpred_comb.misses            326003 # total number of misses
bpred_comb.jr_hits           965151 # total number of address-predicted hits for JR's
bpred_comb.jr_seen           968576 # total number of JR's seen
bpred_comb.jr_non_ras_hits.PP            1 # total number of address-predicted hits for non-RAS JR's
bpred_comb.jr_non_ras_seen.PP            9 # total number of non-RAS JR's seen
bpred_comb.bpred_addr_rate    0.9616 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_comb.bpred_dir_rate    0.9620 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_comb.bpred_jr_rate    0.9965 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_comb.bpred_jr_non_ras_rate.PP    0.1111 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_comb.retstack_pushes      1034368 # total number of address pushed onto ret-addr stack
bpred_comb.retstack_pops      1075356 # total number of address popped off of ret-addr stack
bpred_comb.used_ras.PP       968567 # total number of RAS predictions used
bpred_comb.ras_hits.PP       965150 # total number of RAS hits
bpred_comb.ras_rate.PP    0.9965 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               41977431 # total number of accesses
il1.hits                   41973491 # total number of hits
il1.misses                     3940 # total number of misses
il1.replacements               3449 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0001 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               15567891 # total number of accesses
dl1.hits                   15491536 # total number of hits
dl1.misses                    76355 # total number of misses
dl1.replacements              76227 # total number of replacements
dl1.writebacks                46451 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0049 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0049 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0030 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 126746 # total number of accesses
ul2.hits                      96350 # total number of hits
ul2.misses                    30396 # total number of misses
ul2.replacements              30268 # total number of replacements
ul2.writebacks                16169 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2398 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2388 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.1276 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              41977431 # total number of accesses
itlb.hits                  41977387 # total number of hits
itlb.misses                      44 # total number of misses
itlb.replacements                28 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              16235252 # total number of accesses
dtlb.hits                  16234272 # total number of hits
dtlb.misses                     980 # total number of misses
dtlb.replacements               970 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0001 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           25456957.3438 # total power usage of rename unit
bpred_power            48005862.6415 # total power usage of bpred unit
window_power           229491990.9992 # total power usage of instruction window
lsq_power              52209234.1115 # total power usage of load/store queue
regfile_power          213153972.0673 # total power usage of arch. regfile
icache_power           64134954.2986 # total power usage of icache
dcache_power           54498736.7091 # total power usage of dcache
dcache2_power          9091624.5405 # total power usage of dcache2
alu_power              292463350.4825 # total power usage of alu
falu_power             81002968.8329 # total power usage of falu
resultbus_power        242791200.5860 # total power usage of resultbus
clock_power            662473780.9420 # total power usage of clock
avg_rename_power             1.1220 # avg power usage of rename unit
avg_bpred_power              2.1159 # avg power usage of bpred unit
avg_window_power            10.1150 # avg power usage of instruction window
avg_lsq_power                2.3012 # avg power usage of lsq
avg_regfile_power            9.3949 # avg power usage of arch. regfile
avg_icache_power             2.8268 # avg power usage of icache
avg_dcache_power             2.4021 # avg power usage of dcache
avg_dcache2_power            0.4007 # avg power usage of dcache2
avg_alu_power               12.8905 # avg power usage of alu
avg_falu_power               3.5703 # avg power usage of falu
avg_resultbus_power         10.7012 # avg power usage of resultbus
avg_clock_power             29.1990 # avg power usage of clock
fetch_stage_power      112140816.9401 # total power usage of fetch stage
dispatch_stage_power   25456957.3438 # total power usage of dispatch stage
issue_stage_power      880546137.4289 # total power usage of issue stage
avg_fetch_power              4.9427 # average power of fetch unit per cycle
avg_dispatch_power           1.1220 # average power of dispatch unit per cycle
avg_issue_power             38.8107 # average power of issue unit per cycle
total_power            1893771664.7222 # total power per cycle
avg_total_power_cycle       83.4693 # average total power per cycle
avg_total_power_cycle_nofp_nod2      79.4983 # average total power per cycle
avg_total_power_insn        46.1720 # average total power per insn
avg_total_power_insn_nofp_nod2      43.9754 # average total power per insn
rename_power_cc1       16273224.3268 # total power usage of rename unit_cc1
bpred_power_cc1        12818840.2638 # total power usage of bpred unit_cc1
window_power_cc1       152788993.6009 # total power usage of instruction window_cc1
lsq_power_cc1          12706661.9978 # total power usage of lsq_cc1
regfile_power_cc1      126316594.4408 # total power usage of arch. regfile_cc1
icache_power_cc1       41955322.6511 # total power usage of icache_cc1
dcache_power_cc1       23369725.3307 # total power usage of dcache_cc1
dcache2_power_cc1        31538.0325 # total power usage of dcache2_cc1
alu_power_cc1          129367308.4102 # total power usage of alu_cc1
resultbus_power_cc1    157859116.6641 # total power usage of resultbus_cc1
clock_power_cc1        374490734.5669 # total power usage of clock_cc1
avg_rename_power_cc1         0.7173 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.5650 # avg power usage of bpred unit_cc1
avg_window_power_cc1         6.7343 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.5601 # avg power usage of lsq_cc1
avg_regfile_power_cc1        5.5675 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.8492 # avg power usage of icache_cc1
avg_dcache_power_cc1         1.0300 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0014 # avg power usage of dcache2_cc1
avg_alu_power_cc1            5.7020 # avg power usage of alu_cc1
avg_resultbus_power_cc1       6.9577 # avg power usage of resultbus_cc1
avg_clock_power_cc1         16.5059 # avg power usage of clock_cc1
fetch_stage_power_cc1  54774162.9149 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 16273224.3268 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  476123344.0363 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.4142 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.7173 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1         20.9855 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  1047978060.2856 # total power per cycle_cc1
avg_total_power_cycle_cc1      46.1903 # average total power per cycle_cc1
avg_total_power_insn_cc1      25.5507 # average total power per insn_cc1
rename_power_cc2       5752465.1149 # total power usage of rename unit_cc2
bpred_power_cc2        9087596.2214 # total power usage of bpred unit_cc2
window_power_cc2       75041066.2167 # total power usage of instruction window_cc2
lsq_power_cc2          9794612.2166 # total power usage of lsq_cc2
regfile_power_cc2      37597178.8503 # total power usage of arch. regfile_cc2
icache_power_cc2       41955322.6511 # total power usage of icache_cc2
dcache_power_cc2       18697574.8507 # total power usage of dcache_cc2
dcache2_power_cc2        25394.8012 # total power usage of dcache2_cc2
alu_power_cc2          43512069.5006 # total power usage of alu_cc2
resultbus_power_cc2    53368517.7541 # total power usage of resultbus_cc2
clock_power_cc2        164680807.9668 # total power usage of clock_cc2
avg_rename_power_cc2         0.2535 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.4005 # avg power usage of bpred unit_cc2
avg_window_power_cc2         3.3075 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.4317 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        1.6571 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.8492 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.8241 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0011 # avg power usage of dcache2_cc2
avg_alu_power_cc2            1.9178 # avg power usage of alu_cc2
avg_resultbus_power_cc2       2.3523 # avg power usage of resultbus_cc2
avg_clock_power_cc2          7.2584 # avg power usage of clock_cc2
fetch_stage_power_cc2  51042918.8725 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 5752465.1149 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  200439235.3399 # total power usage of issue stage_cc2
avg_fetch_power_cc2          2.2498 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.2535 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          8.8345 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  459512606.1445 # total power per cycle_cc2
avg_total_power_cycle_cc2      20.2533 # average total power per cycle_cc2
avg_total_power_insn_cc2      11.2034 # average total power per insn_cc2
rename_power_cc3       6670838.4161 # total power usage of rename unit_cc3
bpred_power_cc3        12629691.4378 # total power usage of bpred unit_cc3
window_power_cc3       81364245.2617 # total power usage of instruction window_cc3
lsq_power_cc3          13730093.1473 # total power usage of lsq_cc3
regfile_power_cc3      45215335.1812 # total power usage of arch. regfile_cc3
icache_power_cc3       44173285.8085 # total power usage of icache_cc3
dcache_power_cc3       21933749.4526 # total power usage of dcache_cc3
dcache2_power_cc3       931501.0874 # total power usage of dcache2_cc3
alu_power_cc3          59821673.7032 # total power usage of alu_cc3
resultbus_power_cc3    61562458.1970 # total power usage of resultbus_cc3
clock_power_cc3        192022470.4577 # total power usage of clock_cc3
avg_rename_power_cc3         0.2940 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.5567 # avg power usage of bpred unit_cc3
avg_window_power_cc3         3.5862 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.6052 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        1.9929 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.9470 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.9667 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.0411 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.6367 # avg power usage of alu_cc3
avg_resultbus_power_cc3       2.7134 # avg power usage of resultbus_cc3
avg_clock_power_cc3          8.4635 # avg power usage of clock_cc3
fetch_stage_power_cc3  56802977.2464 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 6670838.4161 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  239343720.8492 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.5036 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.2940 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3         10.5492 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  540055342.1506 # total power per cycle_cc3
avg_total_power_cycle_cc3      23.8033 # average total power per cycle_cc3
avg_total_power_insn_cc3      13.1671 # average total power per insn_cc3
total_rename_access        41014595 # total number accesses of rename unit
total_bpred_access          8589852 # total number accesses of bpred unit
total_window_access       150662666 # total number accesses of instruction window
total_lsq_access           17118626 # total number accesses of load/store queue
total_regfile_access       52687847 # total number accesses of arch. regfile
total_icache_access        41978519 # total number accesses of icache
total_dcache_access        15567891 # total number accesses of dcache
total_dcache2_access         126746 # total number accesses of dcache2
total_alu_access           37348360 # total number accesses of alu
total_resultbus_access     40641794 # total number accesses of resultbus
avg_rename_access            1.8077 # avg number accesses of rename unit
avg_bpred_access             0.3786 # avg number accesses of bpred unit
avg_window_access            6.6406 # avg number accesses of instruction window
avg_lsq_access               0.7545 # avg number accesses of lsq
avg_regfile_access           2.3223 # avg number accesses of arch. regfile
avg_icache_access            1.8502 # avg number accesses of icache
avg_dcache_access            0.6862 # avg number accesses of dcache
avg_dcache2_access           0.0056 # avg number accesses of dcache2
avg_alu_access               1.6462 # avg number accesses of alu
avg_resultbus_access         1.7913 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  4 # max number accesses of bpred unit
max_window_access                24 # max number accesses of instruction window
max_lsq_access                    7 # max number accesses of load/store queue
max_regfile_access               12 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                6 # max number accesses of dcache2
max_alu_access                    8 # max number accesses of alu
max_resultbus_access             11 # max number accesses of resultbus
max_cycle_power_cc1         68.2543 # maximum cycle power usage of cc1
max_cycle_power_cc2         46.0359 # maximum cycle power usage of cc2
max_cycle_power_cc3         47.7474 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  82768 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                   9092 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   37 # total number of pages allocated
mem.page_mem                   148k # total size of memory pages allocated
mem.ptab_misses                  38 # total first level page table misses
mem.ptab_accesses         298010281 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate


Cache Parameters:
  Size in bytes: 4096
  Number of sets: 256
  Associativity: 2
  Block Size (bytes): 8

Access Time: 7.83328e-09
Cycle Time:  9.2734e-09

Best Ndwl (L1): 8
Best Ndbl (L1): 1
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 6.3486
 tag side (ns): 7.23475
 decode_data (ns): 3.86948
 wordline_data (ns): 0.846292
 bitline_data (ns): 0.454304
 sense_amp_data (ns): 0.58
 decode_tag (ns): 1.23548
 wordline_tag (ns): 1.31674
 bitline_tag (ns): -0.0364655
 sense_amp_tag (ns): 0.26
 compare (ns): 2.49475
 mux driver (ns): 1.6004
 sel inverter (ns): 0.363852
 data output driver (ns): 0.598526
 total data path (with output driver) (ns): 5.75007
 total tag path is set assoc (ns): 7.23475
 precharge time (ns): 1.44012

Cache Parameters:
  Size in bytes: 16384
  Number of sets: 512
  Associativity: 1
  Block Size (bytes): 32

Access Time: 6.15176e-09
Cycle Time:  8.05494e-09

Best Ndwl (L1): 2
Best Ndbl (L1): 4
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 6.14931
 tag side (ns): 6.15176
 decode_data (ns): 3.35254
 wordline_data (ns): 1.30935
 bitline_data (ns): 0.184839
 sense_amp_data (ns): 0.58
 decode_tag (ns): 1.84499
 wordline_tag (ns): 0.847457
 bitline_tag (ns): 0.250732
 sense_amp_tag (ns): 0.26
 compare (ns): 2.36506
 valid signal driver (ns): 0.583518
 data output driver (ns): 0.722579
 total data path (with output driver) (ns): 5.42673
 total tag path is dm (ns): 6.15176
 precharge time (ns): 1.90318

Cache Parameters:
  Size in bytes: 4096
  Number of sets: 128
  Associativity: 1
  Block Size (bytes): 32

Access Time: 5.07252e-09
Cycle Time:  6.70931e-09

Best Ndwl (L1): 4
Best Ndbl (L1): 2
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 1
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 5.02046
 tag side (ns): 5.07252
 decode_data (ns): 2.63119
 wordline_data (ns): 1.04296
 bitline_data (ns): 0.0437346
 sense_amp_data (ns): 0.58
 decode_tag (ns): 0.974868
 wordline_tag (ns): 0.802533
 bitline_tag (ns): 0.100468
 sense_amp_tag (ns): 0.26
 compare (ns): 2.35287
 valid signal driver (ns): 0.581786
 data output driver (ns): 0.722579
 total data path (with output driver) (ns): 4.29789
 total tag path is dm (ns): 5.07252
 precharge time (ns): 1.63679

Cache Parameters:
  Size in bytes: 8192
  Number of sets: 128
  Associativity: 1
  Block Size (bytes): 64

Access Time: 5.0657e-09
Cycle Time:  7.07553e-09

Best Ndwl (L1): 2
Best Ndbl (L1): 2
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 1
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 4.56779
 tag side (ns): 5.0657
 decode_data (ns): 1.80364
 wordline_data (ns): 1.41601
 bitline_data (ns): -0.041816
 sense_amp_data (ns): 0.58
 decode_tag (ns): 1.04972
 wordline_tag (ns): 0.782426
 bitline_tag (ns): 0.105301
 sense_amp_tag (ns): 0.26
 compare (ns): 2.29478
 valid signal driver (ns): 0.573466
 data output driver (ns): 0.809959
 total data path (with output driver) (ns): 3.75784
 total tag path is dm (ns): 5.0657
 precharge time (ns): 2.00984
