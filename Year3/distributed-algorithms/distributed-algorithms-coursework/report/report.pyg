defmodule FailureDetector do
  # ____________________________________________________________________ Setters

  defp update_ballot_number(self, ballot_num) do
    %{self | ballot_num: ballot_num}
  end

  defp update_timeout(self, timeout) do
    %{self | timeout: timeout}
  end

  # ____________________________________________________________________________

  def start(config, l) do
    self = %{
      type: :failure_detector,
      config: config,
      leader: l,
      ballot_num: BallotNumber.bottom(),
      timeout: config.initial_leader_timeout
    }

    self |> next
  end

  defp next(self) do
    receive do
      {:PING, ballot_num} ->
        self =
          if BallotNumber.greater_than?(ballot_num, self.ballot_num),
            do: self |> update_ballot_number(ballot_num),
            else: self

        self
        |> ping
    end
    |> next
  end

  defp ping(self) do
    preempting_leader = self.ballot_num.leader
    send(preempting_leader, {:RESPONSE_REQUESTED, self()})
    self |> Monitor.notify(:PING_SENT)

    receive do
      {:STILL_ALIVE, current_ballot, timeout} ->
        Process.sleep(self.timeout)

        self =
          if BallotNumber.greater_than?(current_ballot, self.ballot_num),
            do: self |> update_ballot_number(current_ballot),
            else: self

        self
        |> Monitor.notify(:PING_RESPONSE_RECEIVED)
        |> Debug.log("Ping response received, current timeout: #{timeout}")
        |> update_timeout(timeout)
        |> ping
    after
      self.timeout ->
        send(self.leader, {:PREEMPT, self.ballot_num})

        self
        |> Monitor.notify(:PING_FINISHED)
        |> next
    end
  end
end

